
D:/Lab4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

           .text                   // executable code follows
           .global _start
 _start:
           MOV     R5, #0          // Ones
   0:	e3a05000 	mov	r5, #0
           MOV     R6, #0          // Zeros
   4:	e3a06000 	mov	r6, #0
           MOV     R7, #0          // Alternating
   8:	e3a07000 	mov	r7, #0
           MOV     R3, #TEST_NUM   // load the data word ...
   c:	e3a03f61 	mov	r3, #388	; 0x184

00000010 <MAIN>:
 MAIN:     LDR     R1, [R3]        // into R1
  10:	e5931000 	ldr	r1, [r3]
           CMP     R1, #0          // See if we're at the end of the list
  14:	e3510000 	cmp	r1, #0
           BEQ     DISPLAY         // Print when done!
  18:	0a00002d 	beq	d4 <DISPLAY>
           BL      ONES            // If not, count ones!
  1c:	eb00000c 	bl	54 <ONES>
           CMP     R5, R0          // Compare between largest 1 streak & current
  20:	e1550000 	cmp	r5, r0
           MOVLT   R5, R0          // If current is larger, delet old
  24:	b1a05000 	movlt	r5, r0
           LDR     R1, [R3]        // Restore value
  28:	e5931000 	ldr	r1, [r3]
           BL      ZEROS
  2c:	eb00000f 	bl	70 <ZEROS>
           CMP     R6, R0
  30:	e1560000 	cmp	r6, r0
           MOVLT   R6, R0
  34:	b1a06000 	movlt	r6, r0
           LDR     R1, [R3]        // Restore value
  38:	e5931000 	ldr	r1, [r3]
           BL      ALT
  3c:	eb000013 	bl	90 <ALT>
           CMP     R7, R0
  40:	e1570000 	cmp	r7, r0
           MOVLT   R7, R0
  44:	b1a07000 	movlt	r7, r0
           ADD     R3, #4          // Onto the next number
  48:	e2833004 	add	r3, r3, #4
           B       MAIN
  4c:	eaffffef 	b	10 <MAIN>

00000050 <END>:
 END:      B       END
  50:	eafffffe 	b	50 <END>

00000054 <ONES>:

 // Subroutine to count consecutive ones
 ONES:     MOV     R0, #0          // R0 will hold the result
  54:	e3a00000 	mov	r0, #0

00000058 <LOOPO>:
 LOOPO:    CMP     R1, #0          // loop until the data contains no more 1's
  58:	e3510000 	cmp	r1, #0
           BXEQ    LR
  5c:	012fff1e 	bxeq	lr
           LSR     R2, R1, #1      // perform SHIFT, followed by AND
  60:	e1a020a1 	lsr	r2, r1, #1
           AND     R1, R1, R2
  64:	e0011002 	and	r1, r1, r2
           ADD     R0, #1          // count the string length so far
  68:	e2800001 	add	r0, r0, #1
           B       LOOPO
  6c:	eafffff9 	b	58 <LOOPO>

00000070 <ZEROS>:

 // Subroutine to count consecutive zeros
 ZEROS:    MOV     R0, #0          // R0 will hold the result
  70:	e3a00000 	mov	r0, #0
           MVN     R1, R1          // Complement register, so ONES = !ZEROS
  74:	e1e01001 	mvn	r1, r1

00000078 <LOOPZ>:
 LOOPZ:    CMP     R1, #0          // loop until the data contains no more 1's
  78:	e3510000 	cmp	r1, #0
           BXEQ    LR
  7c:	012fff1e 	bxeq	lr
           LSR     R2, R1, #1      // perform SHIFT, followed by AND
  80:	e1a020a1 	lsr	r2, r1, #1
           AND     R1, R1, R2
  84:	e0011002 	and	r1, r1, r2
           ADD     R0, #1          // count the string length so far
  88:	e2800001 	add	r0, r0, #1
           B       LOOPZ
  8c:	eafffff9 	b	78 <LOOPZ>

00000090 <ALT>:

 // Subroutine to count alternating 1s and 0s
 ALT:      MOV     R0, #0
  90:	e3a00000 	mov	r0, #0
           MOV     R4, #ALT_CMP   // Temp. storage of ALT_CMP and value of ONES
  94:	e3a04d06 	mov	r4, #384	; 0x180
           LDR     R4, [R4]
  98:	e5944000 	ldr	r4, [r4]
           EOR     R1, R4, R1     // Get XOR of ALT_CMP and values.
  9c:	e0241001 	eor	r1, r4, r1
           PUSH    {LR, R1}       // Store LR for BL and R1 to use later
  a0:	e92d4002 	push	{r1, lr}
           BL      ONES           // Get the total number of ones from above EOR
  a4:	ebffffea 	bl	54 <ONES>
           MOV     R4, R0         // Store result of ONES in R4
  a8:	e1a04000 	mov	r4, r0
           POP     {R1}           // Restore XOR result since ONES overwrites R1
  ac:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
           BL      ZEROS          // Get total number of zeros from above EOR
  b0:	ebffffee 	bl	70 <ZEROS>
           POP     {LR}           // Restore LR
  b4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
           CMP     R0, R4         // Compare results from ZEROS and ONES
  b8:	e1500004 	cmp	r0, r4
           MOVLT   R0, R4         // if R0 < R4 then R0 <= R4
  bc:	b1a00004 	movlt	r0, r4
           BX      LR             // We're done, return back to MAIN.
  c0:	e12fff1e 	bx	lr

000000c4 <SEG7_CODE>:

/* Subroutine to convert the digits from 0 to 9 to be shown on a HEX display.
*    Parameters: R0 = the decimal value of the digit to be displayed
*    Returns: R0 = bit patterm to be written to the HEX display
*/
SEG7_CODE:  MOV     R1, #BIT_CODES
  c4:	e3a01f5d 	mov	r1, #372	; 0x174
            ADD     R1, R0         // index into the BIT_CODES "array"
  c8:	e0811000 	add	r1, r1, r0
            LDRB    R0, [R1]       // load the bit pattern (to be returned)
  cc:	e5d10000 	ldrb	r0, [r1]
            MOV     PC, LR
  d0:	e1a0f00e 	mov	pc, lr

000000d4 <DISPLAY>:


/* Display R5 on HEX1-0, R6 on HEX3-2 and R7 on HEX5-4 */
DISPLAY:    LDR     R8, =0xFF200020 // base address of HEX3-HEX0
  d4:	e59f80d4 	ldr	r8, [pc, #212]	; 1b0 <TEST_NUM+0x2c>
            MOV     R0, R5          // display R5 on HEX1-0
  d8:	e1a00005 	mov	r0, r5
            BL      DIVIDE          // ones digit will be in R0; tens
  dc:	eb00001e 	bl	15c <DIVIDE>
                                    // digit in R1
            MOV     R9, R1          // save the tens digit
  e0:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE
  e4:	ebfffff6 	bl	c4 <SEG7_CODE>
            MOV     R4, R0          // save bit code for 1s
  e8:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // retrieve the tens digit, get bit code
  ec:	e1a00009 	mov	r0, r9
            BL      SEG7_CODE
  f0:	ebfffff3 	bl	c4 <SEG7_CODE>
            LSL     R0, #8          // Shift 1 bit
  f4:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0
  f8:	e1844000 	orr	r4, r4, r0

            MOV     R0, R6          // Now for R6
  fc:	e1a00006 	mov	r0, r6
            BL      DIVIDE          // Get decimal value of R6,
 100:	eb000015 	bl	15c <DIVIDE>
            MOV     R9, R1          // Save 10s digit!
 104:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE
 108:	ebffffed 	bl	c4 <SEG7_CODE>
            MOV     R10, R0         // Save bit code
 10c:	e1a0a000 	mov	r10, r0
            MOV     R0, R9          // Get 10s digit for R6
 110:	e1a00009 	mov	r0, r9
            BL      SEG7_CODE       // Now retrieve bit code for 10s digit
 114:	ebffffea 	bl	c4 <SEG7_CODE>
            LSL     R0, #8          // Shift 10s digit by 1 byte for display
 118:	e1a00400 	lsl	r0, r0, #8
            ORR     R10, R0         // Merge 10s & 1s digits in 16-bit (2 byte) value
 11c:	e18aa000 	orr	r10, r10, r0
            LSL     R10, #16        // Shift this value by 2 bytes for display
 120:	e1a0a80a 	lsl	r10, r10, #16
            ORR     R4, R10         // Merge R5 and R6!!
 124:	e184400a 	orr	r4, r4, r10
            STR     R4, [R8]        // display R4 above to HEX3-0
 128:	e5884000 	str	r4, [r8]

            LDR     R8, =0xFF200030 // base address of HEX5-HEX4
 12c:	e59f8080 	ldr	r8, [pc, #128]	; 1b4 <TEST_NUM+0x30>
            MOV     R0, R7
 130:	e1a00007 	mov	r0, r7
            BL      DIVIDE          // R7 / 10 => R1 ... R0
 134:	eb000008 	bl	15c <DIVIDE>
            MOV     R9, R1          // Save 10s digit
 138:	e1a09001 	mov	r9, r1
            BL      SEG7_CODE       // Retrieve bit code for 10s digit
 13c:	ebffffe0 	bl	c4 <SEG7_CODE>
            MOV     R4, R0          // Save 1s digit bit code into R4
 140:	e1a04000 	mov	r4, r0
            MOV     R0, R9          // Get 10s digit!
 144:	e1a00009 	mov	r0, r9
            BL      SEG7_CODE       // Retrieve bit code for 1s digit!
 148:	ebffffdd 	bl	c4 <SEG7_CODE>
            LSL     R0, #8          // Shift 1 byte for 10s digit
 14c:	e1a00400 	lsl	r0, r0, #8
            ORR     R4, R0          // combine 10s and 1s digit into R4
 150:	e1844000 	orr	r4, r4, r0
            STR     R4, [R8]        // display the number from R7!!
 154:	e5884000 	str	r4, [r8]
            BX      LR              // Return back!
 158:	e12fff1e 	bx	lr

0000015c <DIVIDE>:

DIVIDE:    MOV    R1, #0
 15c:	e3a01000 	mov	r1, #0

00000160 <LUP>:
LUP:       CMP    R0, #10        // Check if not divisible by 10!
 160:	e350000a 	cmp	r0, #10
           BXLT   LR
 164:	b12fff1e 	bxlt	lr
           SUBS   R0, #10        // Division by 10
 168:	e250000a 	subs	r0, r0, #10
           ADD    R1, #1         // Add quotient
 16c:	e2811001 	add	r1, r1, #1
           B      LUP            // Repeat
 170:	eafffffa 	b	160 <LUP>

00000174 <BIT_CODES>:
 174:	4f5b063f 	.word	0x4f5b063f
 178:	077d6d66 	.word	0x077d6d66
 17c:	0000677f 	.word	0x0000677f

00000180 <ALT_CMP>:
 180:	55555555 	.word	0x55555555

00000184 <TEST_NUM>:
 184:	103fe00f 	.word	0x103fe00f
 188:	ffffffff 	.word	0xffffffff
 18c:	00000001 	.word	0x00000001
 190:	23345298 	.word	0x23345298
 194:	12345678 	.word	0x12345678
 198:	42042042 	.word	0x42042042
 19c:	99999999 	.word	0x99999999
 1a0:	11111111 	.word	0x11111111
 1a4:	15673456 	.word	0x15673456
 1a8:	13540974 	.word	0x13540974
 1ac:	00000000 	.word	0x00000000
 1b0:	ff200020 	.word	0xff200020
 1b4:	ff200030 	.word	0xff200030
