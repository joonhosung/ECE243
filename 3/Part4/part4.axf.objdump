
D:/Part4/part4.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

/* Program that converts a binary number to decimal */
          .text // executable code follows
          .global _start
_start:
          MOV  R4, #N
   0:	e3a04050 	mov	r4, #80	; 0x50
          MOV  R5, #Digits     // R5 points to the decimal digits storage location
   4:	e3a05054 	mov	r5, #84	; 0x54
          LDR  R4, [R4]        // R4 holds N
   8:	e5944000 	ldr	r4, [r4]
          MOV  R0, R4          // parameter for DIVIDE goes in R0
   c:	e1a00004 	mov	r0, r4
          MOV  R1, #10         // Store divisor
  10:	e3a0100a 	mov	r1, #10
          BL   CONVERT         // Go to the CONVERT subroutine
  14:	eb000000 	bl	1c <CONVERT>

00000018 <END>:
END:      B END
  18:	eafffffe 	b	18 <END>

0000001c <CONVERT>:


CONVERT:  BL DIVIDE
  1c:	eb000005 	bl	38 <DIVIDE>
          STRB R0, [R5]       // Nth digit is in R0
  20:	e5c50000 	strb	r0, [r5]
          MOV  R0, R2
  24:	e1a00002 	mov	r0, r2
          ADD  R5, #1
  28:	e2855001 	add	r5, r5, #1
          SUBS R6, #1         // 1 less digit to worry about!
  2c:	e2566001 	subs	r6, r6, #1
          MOVNE pc, #CONVERT  // if more digits left, go back to converting loop!
  30:	13a0f01c 	movne	pc, #28
          BEQ END             // if done, end!
  34:	0afffff7 	beq	18 <END>

00000038 <DIVIDE>:

DIVIDE:   MOV R2, #0
  38:	e3a02000 	mov	r2, #0

0000003c <CONT>:
CONT:     CMP R0, R1          // See if divisible
  3c:	e1500001 	cmp	r0, r1
          MOVLT PC, LR             // Go back to CONVERT if N not divisible by R1 aonymore!!
  40:	b1a0f00e 	movlt	pc, lr
          SUB R0, R1         // Subtract that baby
  44:	e0400001 	sub	r0, r0, r1
          ADD R2, #1          // increment quotient
  48:	e2822001 	add	r2, r2, #1
          B CONT
  4c:	eafffffa 	b	3c <CONT>

00000050 <N>:
  50:	00002694 	.word	0x00002694

00000054 <Digits>:
	...
