
D:/Part3/part3.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:

/* Program that finds the largest number in a list of integers */
          .text     // executable code follows
          .global   _start
_start:
          MOV R4, #RESULT     // R4 points to result location
   0:	e3a04044 	mov	r4, #68	; 0x44
          LDR R0, [R4, #4]    // R0 holds the number of elements in the list
   4:	e5940004 	ldr	r0, [r4, #4]
          MOV R1, #NUMBERS    // R1 points to the start of the list
   8:	e3a0104c 	mov	r1, #76	; 0x4c
          BL LARGE
   c:	eb000001 	bl	18 <LARGE>
          STR R0, [R4]        // R0 holds the subroutine return value
  10:	e5840000 	str	r0, [r4]

00000014 <END>:
END:      B END
  14:	eafffffe 	b	14 <END>

00000018 <LARGE>:

// R2 holds value of largest integer
// R3 holds value of next integer
LARGE:    MOV R2, #0
  18:	e3a02000 	mov	r2, #0

0000001c <LOOP>:
LOOP:     SUBS R0, #1         // decrement the number of elements left
  1c:	e2500001 	subs	r0, r0, #1
          BEQ DONE            // if result is equal to 0, branch
  20:	0a000005 	beq	3c <DONE>
          ADD R1, #4
  24:	e2811004 	add	r1, r1, #4
          LDR R3, [R1]        // get the next number
  28:	e5913000 	ldr	r3, [r1]
          CMP R2, R3          // check if larger number found
  2c:	e1520003 	cmp	r2, r3
          BGE LOOP
  30:	aafffff9 	bge	1c <LOOP>
          MOV R2, R3          // If R2 is not larger, update the largest number
  34:	e1a02003 	mov	r2, r3
          B LOOP
  38:	eafffff7 	b	1c <LOOP>

0000003c <DONE>:
DONE:     MOV R0, R2          // Finally, return value to R0
  3c:	e1a00002 	mov	r0, r2
          mov PC, LR          // Return back!
  40:	e1a0f00e 	mov	pc, lr

00000044 <RESULT>:
  44:	00000000 	.word	0x00000000

00000048 <N>:
  48:	00000007 	.word	0x00000007

0000004c <NUMBERS>:
  4c:	00000004 	.word	0x00000004
  50:	00000005 	.word	0x00000005
  54:	00000003 	.word	0x00000003
  58:	00000006 	.word	0x00000006
  5c:	00000001 	.word	0x00000001
  60:	00000008 	.word	0x00000008
  64:	00000002 	.word	0x00000002
